/* --------------------------------------------------------------------------------
 #
 #	4DPlugin.cpp
 #	source generated by 4D Plugin Wizard
 #	Project : full-screen-window
 #	author : miyako
 #	2017/01/31
 #
 # --------------------------------------------------------------------------------*/


#include "4DPluginAPI.h"
#include "4DPlugin.h"

#if VERSIONMAC
#import <objc/runtime.h>
#endif

#if VERSIONMAC
#ifndef __LP64__
//or check CGFLOAT_IS_DOUBLE
#define VERSION_MAC_64 0
#define VERSION_MAC_32 1
#else
#define VERSION_MAC_64 1
#define VERSION_MAC_32 0
#endif
#endif

//experimenting with notofication
@interface Listener : NSObject
{
	
}
- (id)init;
- (void)dealloc;
- (void)didExitFullScreen:(NSNotification *)notification;
@end
@implementation Listener

- (id)init
{
	if(!(self = [super init])) return self;
	
	NSNotificationCenter *center = [NSNotificationCenter defaultCenter];
	
	[center
	 addObserver:self
	 selector: @selector(didExitFullScreen:)
	 name:NSWindowDidExitFullScreenNotification
	 object:nil];
	
	return self;
}
- (void)dealloc
{
	[[NSNotificationCenter defaultCenter]removeObserver:self];
	[super dealloc];
}
- (void)didExitFullScreen:(NSNotification *)notification
{
//	NSWindow *window = [notification object];
}
@end

void PluginMain(PA_long32 selector, PA_PluginParameters params)
{
	try
	{
		PA_long32 pProcNum = selector;
		sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
		PackagePtr pParams = (PackagePtr)params->fParameters;

		CommandDispatcher(pProcNum, pResult, pParams); 
	}
	catch(...)
	{

	}
}

void CommandDispatcher (PA_long32 pProcNum, sLONG_PTR *pResult, PackagePtr pParams)
{
	switch(pProcNum)
	{
// --- full-screen-window
//#if VERSION_MAC_64
		case 1 :
			Get_window_full_screen(pResult, pParams);
			break;

		case 2 :
			SET_WINDOW_FULL_SCREEN(pResult, pParams);
			break;
//#endif
	}
}

// ------------------------------ full-screen-window ------------------------------

NSWindow *PA_GetWindowRef64(int winId)
{
	//EX_GET_HWND has been fixed in 15R3 to return a NSWindow* on mac 64bit.
	//http://forums.4d.fr/Post/EN/15872830/1/17032044
	
	PA_ulong32 version = (PA_Get4DVersion() & 0x0000FFFF);
	//	int minor = version & 0x000F;
	int r = (version & 0x00F0) >> 4;
	int major = (version & 0xFF00) >> 8;
	
	if (((major >=0x15) && (r >= 3)) || (major >=0x16))
	{
		return (NSWindow *)PA_GetWindowPtr(reinterpret_cast<NSWindow *>(winId));
	}
	return 0;
}

BOOL Is_window_full_screen(C_LONGINT Param1)
{
	BOOL isWindowFullScreen = NO;
	
	NSWindow *window = PA_GetWindowRef64(Param1.getIntValue());
	isWindowFullScreen = (([window styleMask] & NSFullScreenWindowMask) == NSFullScreenWindowMask);

	return isWindowFullScreen;
}

void Get_window_full_screen(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT Param1;
	C_LONGINT returnValue;

	Param1.fromParamAtIndex(pParams, 1);
	
	returnValue.setIntValue(Is_window_full_screen(Param1));
	returnValue.setReturn(pResult);
}

#define CMD_GET_WINDOW_RECT (443)

void SET_WINDOW_FULL_SCREEN(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT Param1;
	C_LONGINT Param2;

	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);
	
//	direct call of NSWindow toggleFullScreen or NSButton performClick cause problems in 4D
	
	if ((!Is_window_full_screen(Param1)) && Param2.getIntValue())
	{
		//goto full screen
		
		PA_Variable	params[5];
		params[0] = PA_CreateVariable(eVK_Longint);
		params[1] = PA_CreateVariable(eVK_Longint);
		params[2] = PA_CreateVariable(eVK_Longint);
		params[3] = PA_CreateVariable(eVK_Longint);
		params[4] = PA_CreateVariable(eVK_Longint);
		PA_SetLongintVariable(&params[4], Param1.getIntValue());
		
		PA_ExecuteCommandByID(CMD_GET_WINDOW_RECT, params, 5);
		
		int x = PA_GetLongintVariable(params[0]);
		int y = PA_GetLongintVariable(params[1]);
		
		PA_ClearVariable(&params[0]);
		PA_ClearVariable(&params[1]);
		PA_ClearVariable(&params[2]);
		PA_ClearVariable(&params[3]);
		PA_ClearVariable(&params[4]);
		
		//get the local position of the zoom button
		NSWindow *window = PA_GetWindowRef64(Param1.getIntValue());
		NSButton *zoomButton = [window standardWindowButton:NSWindowZoomButton];
		NSRect frame = [zoomButton frame];
		
		//CGPoint is upside-down
		CGPoint p;
		p.x = x + frame.origin.x + (frame.size.width / 2);
		p.y = y - frame.origin.y - (frame.size.height / 2);
		
		//simulate a click event
		CGEventSourceRef eventSource = CGEventSourceCreate(kCGEventSourceStateHIDSystemState);
		CGEventRef e;
		
		//remember the current mouse position
		CGEventRef oe = CGEventCreate(nil);
		CGPoint op = CGEventGetLocation(oe);
		CFRelease(oe);
		
		//post click!
		e = CGEventCreateMouseEvent (eventSource, kCGEventMouseMoved ,p , 0);
		CGEventPost(kCGHIDEventTap, e);
		CGEventSetType(e, kCGEventLeftMouseDown);
		CGEventPost(kCGHIDEventTap, e);
		CGEventSetType(e, kCGEventLeftMouseUp);
		CGEventPost(kCGHIDEventTap, e);
		CGEventSetType(e, kCGEventMouseMoved);
		CGEventSetLocation(e, op);
		CGEventPost(kCGHIDEventTap, e);
		CFRelease(e);
	}else if ((Is_window_full_screen(Param1)) && !Param2.getIntValue())
	{
		//return from full screen
		//the only known way to make sure 4D redraws the window is to deactivate it
		[NSApp deactivate];
		
		NSWindow *window = PA_GetWindowRef64(Param1.getIntValue());
		[window toggleFullScreen:nil];
		
		//none of these can force a redraw;
		[window setViewsNeedDisplay:YES];
		[window flushWindow];
		[window display];
		[window update];
	}

}

